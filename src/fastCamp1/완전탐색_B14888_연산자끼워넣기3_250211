public class Main {
	static StringBuilder sb = new StringBuilder();
	
	static int max, min, N;
	static int[] nums;
	static int[] operator, order;

	static int calculator(int operand1, int operator, int operand2) {
		if (operator == 1)
			return operand1 + operand2;
		else if (operator == 2)
			return operand1 - operand2;
		else if (operator == 3)
			return operand1 * operand2;	
		else if (operator == 4)
			return operand1 / operand2;
	}

	public static void rec_func(int k, int value) {
		if (k == N) {
			//value = calculator();
			max = Math.max(max, value);
			min = Math.min(min, value);
			
		} else {
			for (int cand = 1; cand <= 4; cand++) {
				if (operator[cand] > 0) {
					operator[cand]--;
					order[k] = cand;
					int new_value = calculator(value, cand, nums[k + 1]);

					// if (cand == 1) 
					// 	new_value += nums[k + 1];
					// if (cand == 2)
					// 	new value -= nums[k + 1];
					// if (cand == 3)
					// 	new value *= nums[k + 1];
					// if (cand == 4)
					// 	new value /= nums[k + 1];

					rec_func(k+1, new_value);
					operator[cand]++;
					order[k] = 0;
				}
			}
		}
	}

	public static void main(String[] args) {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());

		nums = new int[N+1];
		operator = new int[5];
		order = new int[N+1];

		st = new StringTokenizer(br.readLine());
		for (int i = 1; i <= N; i++) {
			nums[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());
		for (int i = 1; i <= 4; i++) {
			operator[i] = Integer.parseInt(st.nextToken());
		}

		int max = Integer.MIN_VALUE;
		int min = Integer.MAX_VALUE;
		
		rec_func(1, nums[1]);

		sb.append(max).append('\n').append(min);
		System.out.println(sb.toString());
	
	}
}